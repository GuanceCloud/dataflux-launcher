apiVersion: v1
kind: Namespace
metadata:
  name: middleware
---
# Source: redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis  
type: Opaque
data:
  redis-password:  "{{ redis_password }}"
---
# Source: redis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: server
      protocol: TCP
      name: server
  selector:
    app.kubernetes.io/name: redis  
---
# Source: redis/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
    spec:
      containers:
        - name: redis
          image: pubrepo.guance.com/googleimages/redis:5.0.7
          imagePullPolicy: IfNotPresent
          command:
          - redis-server
          args:
          - --requirepass
          - $(REDIS_PASSWORD)
          ports:
          - name: server
            containerPort: 6379
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: server
          readinessProbe:
            tcpSocket:
              port: server
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis
                key: redis-password
          volumeMounts:
          - name: data
            mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: "{{ storage_class }}"
      resources:
        requests:
          storage: 1Gi
